// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sensor.sql

package repo

import (
	"context"
)

const createSensors = `-- name: CreateSensors :exec
INSERT INTO Sensor (sensor_id, sensor_name, sensor_desc) VALUES ($1, $2, $3)
`

type CreateSensorsParams struct {
	SensorID   int32  `json:"sensor_id"`
	SensorName string `json:"sensor_name"`
	SensorDesc string `json:"sensor_desc"`
}

func (q *Queries) CreateSensors(ctx context.Context, arg CreateSensorsParams) error {
	_, err := q.exec(ctx, q.createSensorsStmt, createSensors, arg.SensorID, arg.SensorName, arg.SensorDesc)
	return err
}

const getSensors = `-- name: GetSensors :many
SELECT sensor_id, sensor_name, sensor_desc FROM Sensor
`

func (q *Queries) GetSensors(ctx context.Context) ([]Sensor, error) {
	rows, err := q.query(ctx, q.getSensorsStmt, getSensors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sensor{}
	for rows.Next() {
		var i Sensor
		if err := rows.Scan(&i.SensorID, &i.SensorName, &i.SensorDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorsList = `-- name: GetSensorsList :many
SELECT sensor_id, sensor_name FROM Sensor
`

type GetSensorsListRow struct {
	SensorID   int32  `json:"sensor_id"`
	SensorName string `json:"sensor_name"`
}

func (q *Queries) GetSensorsList(ctx context.Context) ([]GetSensorsListRow, error) {
	rows, err := q.query(ctx, q.getSensorsListStmt, getSensorsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSensorsListRow{}
	for rows.Next() {
		var i GetSensorsListRow
		if err := rows.Scan(&i.SensorID, &i.SensorName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSensors = `-- name: UpdateSensors :exec
UPDATE Sensor SET sensor_name = $1, sensor_desc = $2 WHERE sensor_id = $3
`

type UpdateSensorsParams struct {
	SensorName string `json:"sensor_name"`
	SensorDesc string `json:"sensor_desc"`
	SensorID   int32  `json:"sensor_id"`
}

func (q *Queries) UpdateSensors(ctx context.Context, arg UpdateSensorsParams) error {
	_, err := q.exec(ctx, q.updateSensorsStmt, updateSensors, arg.SensorName, arg.SensorDesc, arg.SensorID)
	return err
}
