// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: secrets.sql

package repo

import (
	"context"
	"database/sql"
)

const getExpiredSecrets = `-- name: GetExpiredSecrets :many
SELECT id, name, value, expires_at, created_at, updated_at FROM secrets WHERE expires_at < NOW()
`

func (q *Queries) GetExpiredSecrets(ctx context.Context) ([]Secret, error) {
	rows, err := q.query(ctx, q.getExpiredSecretsStmt, getExpiredSecrets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Secret{}
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecretByName = `-- name: GetSecretByName :one
SELECT id, name, value, expires_at, created_at, updated_at FROM secrets WHERE name = $1
`

func (q *Queries) GetSecretByName(ctx context.Context, name string) (Secret, error) {
	row := q.queryRow(ctx, q.getSecretByNameStmt, getSecretByName, name)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSecret = `-- name: UpdateSecret :exec
UPDATE secrets
SET value = $2, expires_at = $3, updated_at = NOW()
WHERE name = $1
`

type UpdateSecretParams struct {
	Name      string       `json:"name"`
	Value     string       `json:"value"`
	ExpiresAt sql.NullTime `json:"expires_at"`
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) error {
	_, err := q.exec(ctx, q.updateSecretStmt, updateSecret, arg.Name, arg.Value, arg.ExpiresAt)
	return err
}
