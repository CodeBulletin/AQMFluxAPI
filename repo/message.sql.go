// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO NotificationMessage (Title, Topic, Payload, Tags, MessagePriority) VALUES ($1, $2, $3, $4, $5) RETURNING id, title, topic, payload, tags, messagepriority, created_at, updated_at
`

type CreateMessageParams struct {
	Title           string         `json:"title"`
	Topic           string         `json:"topic"`
	Payload         string         `json:"payload"`
	Tags            sql.NullString `json:"tags"`
	Messagepriority int32          `json:"messagepriority"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Notificationmessage, error) {
	row := q.queryRow(ctx, q.createMessageStmt, createMessage,
		arg.Title,
		arg.Topic,
		arg.Payload,
		arg.Tags,
		arg.Messagepriority,
	)
	var i Notificationmessage
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Payload,
		&i.Tags,
		&i.Messagepriority,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :one
DELETE FROM NotificationMessage WHERE id = $1 RETURNING id, title, topic, payload, tags, messagepriority, created_at, updated_at
`

func (q *Queries) DeleteMessage(ctx context.Context, id int32) (Notificationmessage, error) {
	row := q.queryRow(ctx, q.deleteMessageStmt, deleteMessage, id)
	var i Notificationmessage
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Payload,
		&i.Tags,
		&i.Messagepriority,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :one
SELECT id, title, topic, payload, tags, messagepriority, created_at, updated_at FROM NotificationMessage WHERE id = $1
`

func (q *Queries) GetMessages(ctx context.Context, id int32) (Notificationmessage, error) {
	row := q.queryRow(ctx, q.getMessagesStmt, getMessages, id)
	var i Notificationmessage
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Payload,
		&i.Tags,
		&i.Messagepriority,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessageslist = `-- name: GetMessageslist :many
SELECT id, Title FROM NotificationMessage
`

type GetMessageslistRow struct {
	ID    int32  `json:"id"`
	Title string `json:"title"`
}

func (q *Queries) GetMessageslist(ctx context.Context) ([]GetMessageslistRow, error) {
	rows, err := q.query(ctx, q.getMessageslistStmt, getMessageslist)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessageslistRow{}
	for rows.Next() {
		var i GetMessageslistRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE NotificationMessage SET Title = $1, Topic = $2, Payload = $3, Tags = $4, MessagePriority = $5, updated_at = NOW() WHERE id = $6 RETURNING id, title, topic, payload, tags, messagepriority, created_at, updated_at
`

type UpdateMessageParams struct {
	Title           string         `json:"title"`
	Topic           string         `json:"topic"`
	Payload         string         `json:"payload"`
	Tags            sql.NullString `json:"tags"`
	Messagepriority int32          `json:"messagepriority"`
	ID              int32          `json:"id"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Notificationmessage, error) {
	row := q.queryRow(ctx, q.updateMessageStmt, updateMessage,
		arg.Title,
		arg.Topic,
		arg.Payload,
		arg.Tags,
		arg.Messagepriority,
		arg.ID,
	)
	var i Notificationmessage
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Payload,
		&i.Tags,
		&i.Messagepriority,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
