// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repo

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addSensorToDeviceStmt, err = db.PrepareContext(ctx, addSensorToDevice); err != nil {
		return nil, fmt.Errorf("error preparing query AddSensorToDevice: %w", err)
	}
	if q.attributeIdFromNameStmt, err = db.PrepareContext(ctx, attributeIdFromName); err != nil {
		return nil, fmt.Errorf("error preparing query AttributeIdFromName: %w", err)
	}
	if q.createAttributeStmt, err = db.PrepareContext(ctx, createAttribute); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAttribute: %w", err)
	}
	if q.createDeviceStmt, err = db.PrepareContext(ctx, createDevice); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDevice: %w", err)
	}
	if q.createDeviceAddrStmt, err = db.PrepareContext(ctx, createDeviceAddr); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDeviceAddr: %w", err)
	}
	if q.createLocationStmt, err = db.PrepareContext(ctx, createLocation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLocation: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createSensorsStmt, err = db.PrepareContext(ctx, createSensors); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSensors: %w", err)
	}
	if q.createThresholdStmt, err = db.PrepareContext(ctx, createThreshold); err != nil {
		return nil, fmt.Errorf("error preparing query CreateThreshold: %w", err)
	}
	if q.deleteConfigByKeyStmt, err = db.PrepareContext(ctx, deleteConfigByKey); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteConfigByKey: %w", err)
	}
	if q.deleteDeviceSensorsStmt, err = db.PrepareContext(ctx, deleteDeviceSensors); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDeviceSensors: %w", err)
	}
	if q.deleteMessageStmt, err = db.PrepareContext(ctx, deleteMessage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMessage: %w", err)
	}
	if q.deleteThresholdStmt, err = db.PrepareContext(ctx, deleteThreshold); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteThreshold: %w", err)
	}
	if q.getAllAttributesStmt, err = db.PrepareContext(ctx, getAllAttributes); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllAttributes: %w", err)
	}
	if q.getAllDeviceInformationStmt, err = db.PrepareContext(ctx, getAllDeviceInformation); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDeviceInformation: %w", err)
	}
	if q.getAttributesListStmt, err = db.PrepareContext(ctx, getAttributesList); err != nil {
		return nil, fmt.Errorf("error preparing query GetAttributesList: %w", err)
	}
	if q.getConfigByKeyStmt, err = db.PrepareContext(ctx, getConfigByKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetConfigByKey: %w", err)
	}
	if q.getDeviceSensorsStmt, err = db.PrepareContext(ctx, getDeviceSensors); err != nil {
		return nil, fmt.Errorf("error preparing query GetDeviceSensors: %w", err)
	}
	if q.getDevicesListStmt, err = db.PrepareContext(ctx, getDevicesList); err != nil {
		return nil, fmt.Errorf("error preparing query GetDevicesList: %w", err)
	}
	if q.getExpiredSecretsStmt, err = db.PrepareContext(ctx, getExpiredSecrets); err != nil {
		return nil, fmt.Errorf("error preparing query GetExpiredSecrets: %w", err)
	}
	if q.getHighestMeasurementOfLastHourStmt, err = db.PrepareContext(ctx, getHighestMeasurementOfLastHour); err != nil {
		return nil, fmt.Errorf("error preparing query GetHighestMeasurementOfLastHour: %w", err)
	}
	if q.getIntervalConfigStmt, err = db.PrepareContext(ctx, getIntervalConfig); err != nil {
		return nil, fmt.Errorf("error preparing query GetIntervalConfig: %w", err)
	}
	if q.getLatestMeasurementStmt, err = db.PrepareContext(ctx, getLatestMeasurement); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestMeasurement: %w", err)
	}
	if q.getLocationsStmt, err = db.PrepareContext(ctx, getLocations); err != nil {
		return nil, fmt.Errorf("error preparing query GetLocations: %w", err)
	}
	if q.getMessagesStmt, err = db.PrepareContext(ctx, getMessages); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessages: %w", err)
	}
	if q.getMessageslistStmt, err = db.PrepareContext(ctx, getMessageslist); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessageslist: %w", err)
	}
	if q.getOperatorsStmt, err = db.PrepareContext(ctx, getOperators); err != nil {
		return nil, fmt.Errorf("error preparing query GetOperators: %w", err)
	}
	if q.getSecretByNameStmt, err = db.PrepareContext(ctx, getSecretByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetSecretByName: %w", err)
	}
	if q.getSensorsStmt, err = db.PrepareContext(ctx, getSensors); err != nil {
		return nil, fmt.Errorf("error preparing query GetSensors: %w", err)
	}
	if q.getSensorsListStmt, err = db.PrepareContext(ctx, getSensorsList); err != nil {
		return nil, fmt.Errorf("error preparing query GetSensorsList: %w", err)
	}
	if q.getThresholdsStmt, err = db.PrepareContext(ctx, getThresholds); err != nil {
		return nil, fmt.Errorf("error preparing query GetThresholds: %w", err)
	}
	if q.insertMeasurementStmt, err = db.PrepareContext(ctx, insertMeasurement); err != nil {
		return nil, fmt.Errorf("error preparing query InsertMeasurement: %w", err)
	}
	if q.loadConfigDataStmt, err = db.PrepareContext(ctx, loadConfigData); err != nil {
		return nil, fmt.Errorf("error preparing query LoadConfigData: %w", err)
	}
	if q.setConfigBykeyStmt, err = db.PrepareContext(ctx, setConfigBykey); err != nil {
		return nil, fmt.Errorf("error preparing query SetConfigBykey: %w", err)
	}
	if q.updateAttributeStmt, err = db.PrepareContext(ctx, updateAttribute); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAttribute: %w", err)
	}
	if q.updateDeviceStmt, err = db.PrepareContext(ctx, updateDevice); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDevice: %w", err)
	}
	if q.updateDeviceAddrStmt, err = db.PrepareContext(ctx, updateDeviceAddr); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDeviceAddr: %w", err)
	}
	if q.updateLocationStmt, err = db.PrepareContext(ctx, updateLocation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLocation: %w", err)
	}
	if q.updateMessageStmt, err = db.PrepareContext(ctx, updateMessage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMessage: %w", err)
	}
	if q.updateSecretStmt, err = db.PrepareContext(ctx, updateSecret); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSecret: %w", err)
	}
	if q.updateSensorsStmt, err = db.PrepareContext(ctx, updateSensors); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSensors: %w", err)
	}
	if q.updateThresholdStmt, err = db.PrepareContext(ctx, updateThreshold); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateThreshold: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addSensorToDeviceStmt != nil {
		if cerr := q.addSensorToDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addSensorToDeviceStmt: %w", cerr)
		}
	}
	if q.attributeIdFromNameStmt != nil {
		if cerr := q.attributeIdFromNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing attributeIdFromNameStmt: %w", cerr)
		}
	}
	if q.createAttributeStmt != nil {
		if cerr := q.createAttributeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAttributeStmt: %w", cerr)
		}
	}
	if q.createDeviceStmt != nil {
		if cerr := q.createDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDeviceStmt: %w", cerr)
		}
	}
	if q.createDeviceAddrStmt != nil {
		if cerr := q.createDeviceAddrStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDeviceAddrStmt: %w", cerr)
		}
	}
	if q.createLocationStmt != nil {
		if cerr := q.createLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLocationStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createSensorsStmt != nil {
		if cerr := q.createSensorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSensorsStmt: %w", cerr)
		}
	}
	if q.createThresholdStmt != nil {
		if cerr := q.createThresholdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createThresholdStmt: %w", cerr)
		}
	}
	if q.deleteConfigByKeyStmt != nil {
		if cerr := q.deleteConfigByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteConfigByKeyStmt: %w", cerr)
		}
	}
	if q.deleteDeviceSensorsStmt != nil {
		if cerr := q.deleteDeviceSensorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDeviceSensorsStmt: %w", cerr)
		}
	}
	if q.deleteMessageStmt != nil {
		if cerr := q.deleteMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMessageStmt: %w", cerr)
		}
	}
	if q.deleteThresholdStmt != nil {
		if cerr := q.deleteThresholdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteThresholdStmt: %w", cerr)
		}
	}
	if q.getAllAttributesStmt != nil {
		if cerr := q.getAllAttributesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllAttributesStmt: %w", cerr)
		}
	}
	if q.getAllDeviceInformationStmt != nil {
		if cerr := q.getAllDeviceInformationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDeviceInformationStmt: %w", cerr)
		}
	}
	if q.getAttributesListStmt != nil {
		if cerr := q.getAttributesListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAttributesListStmt: %w", cerr)
		}
	}
	if q.getConfigByKeyStmt != nil {
		if cerr := q.getConfigByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConfigByKeyStmt: %w", cerr)
		}
	}
	if q.getDeviceSensorsStmt != nil {
		if cerr := q.getDeviceSensorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDeviceSensorsStmt: %w", cerr)
		}
	}
	if q.getDevicesListStmt != nil {
		if cerr := q.getDevicesListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDevicesListStmt: %w", cerr)
		}
	}
	if q.getExpiredSecretsStmt != nil {
		if cerr := q.getExpiredSecretsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExpiredSecretsStmt: %w", cerr)
		}
	}
	if q.getHighestMeasurementOfLastHourStmt != nil {
		if cerr := q.getHighestMeasurementOfLastHourStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHighestMeasurementOfLastHourStmt: %w", cerr)
		}
	}
	if q.getIntervalConfigStmt != nil {
		if cerr := q.getIntervalConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIntervalConfigStmt: %w", cerr)
		}
	}
	if q.getLatestMeasurementStmt != nil {
		if cerr := q.getLatestMeasurementStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestMeasurementStmt: %w", cerr)
		}
	}
	if q.getLocationsStmt != nil {
		if cerr := q.getLocationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLocationsStmt: %w", cerr)
		}
	}
	if q.getMessagesStmt != nil {
		if cerr := q.getMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessagesStmt: %w", cerr)
		}
	}
	if q.getMessageslistStmt != nil {
		if cerr := q.getMessageslistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageslistStmt: %w", cerr)
		}
	}
	if q.getOperatorsStmt != nil {
		if cerr := q.getOperatorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOperatorsStmt: %w", cerr)
		}
	}
	if q.getSecretByNameStmt != nil {
		if cerr := q.getSecretByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSecretByNameStmt: %w", cerr)
		}
	}
	if q.getSensorsStmt != nil {
		if cerr := q.getSensorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSensorsStmt: %w", cerr)
		}
	}
	if q.getSensorsListStmt != nil {
		if cerr := q.getSensorsListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSensorsListStmt: %w", cerr)
		}
	}
	if q.getThresholdsStmt != nil {
		if cerr := q.getThresholdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getThresholdsStmt: %w", cerr)
		}
	}
	if q.insertMeasurementStmt != nil {
		if cerr := q.insertMeasurementStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertMeasurementStmt: %w", cerr)
		}
	}
	if q.loadConfigDataStmt != nil {
		if cerr := q.loadConfigDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing loadConfigDataStmt: %w", cerr)
		}
	}
	if q.setConfigBykeyStmt != nil {
		if cerr := q.setConfigBykeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setConfigBykeyStmt: %w", cerr)
		}
	}
	if q.updateAttributeStmt != nil {
		if cerr := q.updateAttributeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAttributeStmt: %w", cerr)
		}
	}
	if q.updateDeviceStmt != nil {
		if cerr := q.updateDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDeviceStmt: %w", cerr)
		}
	}
	if q.updateDeviceAddrStmt != nil {
		if cerr := q.updateDeviceAddrStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDeviceAddrStmt: %w", cerr)
		}
	}
	if q.updateLocationStmt != nil {
		if cerr := q.updateLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLocationStmt: %w", cerr)
		}
	}
	if q.updateMessageStmt != nil {
		if cerr := q.updateMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMessageStmt: %w", cerr)
		}
	}
	if q.updateSecretStmt != nil {
		if cerr := q.updateSecretStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSecretStmt: %w", cerr)
		}
	}
	if q.updateSensorsStmt != nil {
		if cerr := q.updateSensorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSensorsStmt: %w", cerr)
		}
	}
	if q.updateThresholdStmt != nil {
		if cerr := q.updateThresholdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateThresholdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	addSensorToDeviceStmt               *sql.Stmt
	attributeIdFromNameStmt             *sql.Stmt
	createAttributeStmt                 *sql.Stmt
	createDeviceStmt                    *sql.Stmt
	createDeviceAddrStmt                *sql.Stmt
	createLocationStmt                  *sql.Stmt
	createMessageStmt                   *sql.Stmt
	createSensorsStmt                   *sql.Stmt
	createThresholdStmt                 *sql.Stmt
	deleteConfigByKeyStmt               *sql.Stmt
	deleteDeviceSensorsStmt             *sql.Stmt
	deleteMessageStmt                   *sql.Stmt
	deleteThresholdStmt                 *sql.Stmt
	getAllAttributesStmt                *sql.Stmt
	getAllDeviceInformationStmt         *sql.Stmt
	getAttributesListStmt               *sql.Stmt
	getConfigByKeyStmt                  *sql.Stmt
	getDeviceSensorsStmt                *sql.Stmt
	getDevicesListStmt                  *sql.Stmt
	getExpiredSecretsStmt               *sql.Stmt
	getHighestMeasurementOfLastHourStmt *sql.Stmt
	getIntervalConfigStmt               *sql.Stmt
	getLatestMeasurementStmt            *sql.Stmt
	getLocationsStmt                    *sql.Stmt
	getMessagesStmt                     *sql.Stmt
	getMessageslistStmt                 *sql.Stmt
	getOperatorsStmt                    *sql.Stmt
	getSecretByNameStmt                 *sql.Stmt
	getSensorsStmt                      *sql.Stmt
	getSensorsListStmt                  *sql.Stmt
	getThresholdsStmt                   *sql.Stmt
	insertMeasurementStmt               *sql.Stmt
	loadConfigDataStmt                  *sql.Stmt
	setConfigBykeyStmt                  *sql.Stmt
	updateAttributeStmt                 *sql.Stmt
	updateDeviceStmt                    *sql.Stmt
	updateDeviceAddrStmt                *sql.Stmt
	updateLocationStmt                  *sql.Stmt
	updateMessageStmt                   *sql.Stmt
	updateSecretStmt                    *sql.Stmt
	updateSensorsStmt                   *sql.Stmt
	updateThresholdStmt                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		addSensorToDeviceStmt:               q.addSensorToDeviceStmt,
		attributeIdFromNameStmt:             q.attributeIdFromNameStmt,
		createAttributeStmt:                 q.createAttributeStmt,
		createDeviceStmt:                    q.createDeviceStmt,
		createDeviceAddrStmt:                q.createDeviceAddrStmt,
		createLocationStmt:                  q.createLocationStmt,
		createMessageStmt:                   q.createMessageStmt,
		createSensorsStmt:                   q.createSensorsStmt,
		createThresholdStmt:                 q.createThresholdStmt,
		deleteConfigByKeyStmt:               q.deleteConfigByKeyStmt,
		deleteDeviceSensorsStmt:             q.deleteDeviceSensorsStmt,
		deleteMessageStmt:                   q.deleteMessageStmt,
		deleteThresholdStmt:                 q.deleteThresholdStmt,
		getAllAttributesStmt:                q.getAllAttributesStmt,
		getAllDeviceInformationStmt:         q.getAllDeviceInformationStmt,
		getAttributesListStmt:               q.getAttributesListStmt,
		getConfigByKeyStmt:                  q.getConfigByKeyStmt,
		getDeviceSensorsStmt:                q.getDeviceSensorsStmt,
		getDevicesListStmt:                  q.getDevicesListStmt,
		getExpiredSecretsStmt:               q.getExpiredSecretsStmt,
		getHighestMeasurementOfLastHourStmt: q.getHighestMeasurementOfLastHourStmt,
		getIntervalConfigStmt:               q.getIntervalConfigStmt,
		getLatestMeasurementStmt:            q.getLatestMeasurementStmt,
		getLocationsStmt:                    q.getLocationsStmt,
		getMessagesStmt:                     q.getMessagesStmt,
		getMessageslistStmt:                 q.getMessageslistStmt,
		getOperatorsStmt:                    q.getOperatorsStmt,
		getSecretByNameStmt:                 q.getSecretByNameStmt,
		getSensorsStmt:                      q.getSensorsStmt,
		getSensorsListStmt:                  q.getSensorsListStmt,
		getThresholdsStmt:                   q.getThresholdsStmt,
		insertMeasurementStmt:               q.insertMeasurementStmt,
		loadConfigDataStmt:                  q.loadConfigDataStmt,
		setConfigBykeyStmt:                  q.setConfigBykeyStmt,
		updateAttributeStmt:                 q.updateAttributeStmt,
		updateDeviceStmt:                    q.updateDeviceStmt,
		updateDeviceAddrStmt:                q.updateDeviceAddrStmt,
		updateLocationStmt:                  q.updateLocationStmt,
		updateMessageStmt:                   q.updateMessageStmt,
		updateSecretStmt:                    q.updateSecretStmt,
		updateSensorsStmt:                   q.updateSensorsStmt,
		updateThresholdStmt:                 q.updateThresholdStmt,
	}
}
