// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: threshold.sql

package repo

import (
	"context"
	"database/sql"
)

const createThreshold = `-- name: CreateThreshold :one
INSERT INTO Threshold (
    sensor_id,
    device_id,
    attribute_id,
    message_id,
    value1,
    value2,
    frequency,
    operator_id,
    TriggerName,
    TriggerEnabled
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
) RETURNING id, sensor_id, device_id, attribute_id, message_id, value1, value2, frequency, created_at, updated_at, last_triggered, operator_id, triggername, triggerenabled
`

type CreateThresholdParams struct {
	SensorID       int32           `json:"sensor_id"`
	DeviceID       int32           `json:"device_id"`
	AttributeID    int32           `json:"attribute_id"`
	MessageID      int32           `json:"message_id"`
	Value1         float64         `json:"value1"`
	Value2         sql.NullFloat64 `json:"value2"`
	Frequency      int32           `json:"frequency"`
	OperatorID     int32           `json:"operator_id"`
	Triggername    string          `json:"triggername"`
	Triggerenabled bool            `json:"triggerenabled"`
}

func (q *Queries) CreateThreshold(ctx context.Context, arg CreateThresholdParams) (Threshold, error) {
	row := q.queryRow(ctx, q.createThresholdStmt, createThreshold,
		arg.SensorID,
		arg.DeviceID,
		arg.AttributeID,
		arg.MessageID,
		arg.Value1,
		arg.Value2,
		arg.Frequency,
		arg.OperatorID,
		arg.Triggername,
		arg.Triggerenabled,
	)
	var i Threshold
	err := row.Scan(
		&i.ID,
		&i.SensorID,
		&i.DeviceID,
		&i.AttributeID,
		&i.MessageID,
		&i.Value1,
		&i.Value2,
		&i.Frequency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastTriggered,
		&i.OperatorID,
		&i.Triggername,
		&i.Triggerenabled,
	)
	return i, err
}

const deleteThreshold = `-- name: DeleteThreshold :one
DELETE FROM Threshold
WHERE id = $1 RETURNING id, sensor_id, device_id, attribute_id, message_id, value1, value2, frequency, created_at, updated_at, last_triggered, operator_id, triggername, triggerenabled
`

func (q *Queries) DeleteThreshold(ctx context.Context, id int32) (Threshold, error) {
	row := q.queryRow(ctx, q.deleteThresholdStmt, deleteThreshold, id)
	var i Threshold
	err := row.Scan(
		&i.ID,
		&i.SensorID,
		&i.DeviceID,
		&i.AttributeID,
		&i.MessageID,
		&i.Value1,
		&i.Value2,
		&i.Frequency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastTriggered,
		&i.OperatorID,
		&i.Triggername,
		&i.Triggerenabled,
	)
	return i, err
}

const updateThreshold = `-- name: UpdateThreshold :one
UPDATE Threshold SET
    sensor_id    = $1,
    device_id    = $2,
    attribute_id = $3,
    message_id   = $4,
    value1       = $5,
    value2       = $6,
    frequency    = $7,
    operator_id  = $8,
    TriggerName  = $9,
    TriggerEnabled = $10
WHERE id = $11 RETURNING id, sensor_id, device_id, attribute_id, message_id, value1, value2, frequency, created_at, updated_at, last_triggered, operator_id, triggername, triggerenabled
`

type UpdateThresholdParams struct {
	SensorID       int32           `json:"sensor_id"`
	DeviceID       int32           `json:"device_id"`
	AttributeID    int32           `json:"attribute_id"`
	MessageID      int32           `json:"message_id"`
	Value1         float64         `json:"value1"`
	Value2         sql.NullFloat64 `json:"value2"`
	Frequency      int32           `json:"frequency"`
	OperatorID     int32           `json:"operator_id"`
	Triggername    string          `json:"triggername"`
	Triggerenabled bool            `json:"triggerenabled"`
	ID             int32           `json:"id"`
}

func (q *Queries) UpdateThreshold(ctx context.Context, arg UpdateThresholdParams) (Threshold, error) {
	row := q.queryRow(ctx, q.updateThresholdStmt, updateThreshold,
		arg.SensorID,
		arg.DeviceID,
		arg.AttributeID,
		arg.MessageID,
		arg.Value1,
		arg.Value2,
		arg.Frequency,
		arg.OperatorID,
		arg.Triggername,
		arg.Triggerenabled,
		arg.ID,
	)
	var i Threshold
	err := row.Scan(
		&i.ID,
		&i.SensorID,
		&i.DeviceID,
		&i.AttributeID,
		&i.MessageID,
		&i.Value1,
		&i.Value2,
		&i.Frequency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastTriggered,
		&i.OperatorID,
		&i.Triggername,
		&i.Triggerenabled,
	)
	return i, err
}
