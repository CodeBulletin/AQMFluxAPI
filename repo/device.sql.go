// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: device.sql

package repo

import (
	"context"
)

const addSensorToDevice = `-- name: AddSensorToDevice :exec
INSERT INTO SensorDevice (sensor_id, device_id) VALUES ($1, $2)
`

type AddSensorToDeviceParams struct {
	SensorID int32 `json:"sensor_id"`
	DeviceID int32 `json:"device_id"`
}

func (q *Queries) AddSensorToDevice(ctx context.Context, arg AddSensorToDeviceParams) error {
	_, err := q.exec(ctx, q.addSensorToDeviceStmt, addSensorToDevice, arg.SensorID, arg.DeviceID)
	return err
}

const createDevice = `-- name: CreateDevice :exec
INSERT INTO Device (device_id, device_name, location_id, device_desc) VALUES ($1, $2, $3, $4)
`

type CreateDeviceParams struct {
	DeviceID   int32  `json:"device_id"`
	DeviceName string `json:"device_name"`
	LocationID int32  `json:"location_id"`
	DeviceDesc string `json:"device_desc"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) error {
	_, err := q.exec(ctx, q.createDeviceStmt, createDevice,
		arg.DeviceID,
		arg.DeviceName,
		arg.LocationID,
		arg.DeviceDesc,
	)
	return err
}

const createDeviceAddr = `-- name: CreateDeviceAddr :exec
INSERT INTO DeviceAddr (device_id, IP_addr, MAC_addr, PORT) VALUES ($1, $2, $3, $4)
`

type CreateDeviceAddrParams struct {
	DeviceID int32  `json:"device_id"`
	IpAddr   string `json:"ip_addr"`
	MacAddr  string `json:"mac_addr"`
	Port     int32  `json:"port"`
}

func (q *Queries) CreateDeviceAddr(ctx context.Context, arg CreateDeviceAddrParams) error {
	_, err := q.exec(ctx, q.createDeviceAddrStmt, createDeviceAddr,
		arg.DeviceID,
		arg.IpAddr,
		arg.MacAddr,
		arg.Port,
	)
	return err
}

const deleteDeviceSensors = `-- name: DeleteDeviceSensors :exec
DELETE FROM SensorDevice WHERE device_id = $1
`

func (q *Queries) DeleteDeviceSensors(ctx context.Context, deviceID int32) error {
	_, err := q.exec(ctx, q.deleteDeviceSensorsStmt, deleteDeviceSensors, deviceID)
	return err
}

const getAllDeviceInformation = `-- name: GetAllDeviceInformation :many
SELECT Device.device_id, device_name, Device.location_id, device_desc, IP_addr, MAC_addr, PORT
FROM Device
JOIN DeviceAddr ON Device.device_id = DeviceAddr.device_id
JOIN DeviceLocation ON Device.location_id = DeviceLocation.location_id
`

type GetAllDeviceInformationRow struct {
	DeviceID   int32  `json:"device_id"`
	DeviceName string `json:"device_name"`
	LocationID int32  `json:"location_id"`
	DeviceDesc string `json:"device_desc"`
	IpAddr     string `json:"ip_addr"`
	MacAddr    string `json:"mac_addr"`
	Port       int32  `json:"port"`
}

func (q *Queries) GetAllDeviceInformation(ctx context.Context) ([]GetAllDeviceInformationRow, error) {
	rows, err := q.query(ctx, q.getAllDeviceInformationStmt, getAllDeviceInformation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllDeviceInformationRow{}
	for rows.Next() {
		var i GetAllDeviceInformationRow
		if err := rows.Scan(
			&i.DeviceID,
			&i.DeviceName,
			&i.LocationID,
			&i.DeviceDesc,
			&i.IpAddr,
			&i.MacAddr,
			&i.Port,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceSensors = `-- name: GetDeviceSensors :many
SELECT Sensor.sensor_id, sensor_name  FROM Sensor 
JOIN SensorDevice ON Sensor.sensor_id = SensorDevice.sensor_id
WHERE SensorDevice.device_id = $1
`

type GetDeviceSensorsRow struct {
	SensorID   int32  `json:"sensor_id"`
	SensorName string `json:"sensor_name"`
}

func (q *Queries) GetDeviceSensors(ctx context.Context, deviceID int32) ([]GetDeviceSensorsRow, error) {
	rows, err := q.query(ctx, q.getDeviceSensorsStmt, getDeviceSensors, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDeviceSensorsRow{}
	for rows.Next() {
		var i GetDeviceSensorsRow
		if err := rows.Scan(&i.SensorID, &i.SensorName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesList = `-- name: GetDevicesList :many
SELECT device_id, device_name FROM Device
`

type GetDevicesListRow struct {
	DeviceID   int32  `json:"device_id"`
	DeviceName string `json:"device_name"`
}

func (q *Queries) GetDevicesList(ctx context.Context) ([]GetDevicesListRow, error) {
	rows, err := q.query(ctx, q.getDevicesListStmt, getDevicesList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDevicesListRow{}
	for rows.Next() {
		var i GetDevicesListRow
		if err := rows.Scan(&i.DeviceID, &i.DeviceName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE Device SET device_name = $2, location_id = $3, device_desc = $4 WHERE device_id = $1
`

type UpdateDeviceParams struct {
	DeviceID   int32  `json:"device_id"`
	DeviceName string `json:"device_name"`
	LocationID int32  `json:"location_id"`
	DeviceDesc string `json:"device_desc"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	_, err := q.exec(ctx, q.updateDeviceStmt, updateDevice,
		arg.DeviceID,
		arg.DeviceName,
		arg.LocationID,
		arg.DeviceDesc,
	)
	return err
}

const updateDeviceAddr = `-- name: UpdateDeviceAddr :exec
UPDATE DeviceAddr SET IP_addr = $2, MAC_addr = $3, PORT = $4 WHERE device_id = $1
`

type UpdateDeviceAddrParams struct {
	DeviceID int32  `json:"device_id"`
	IpAddr   string `json:"ip_addr"`
	MacAddr  string `json:"mac_addr"`
	Port     int32  `json:"port"`
}

func (q *Queries) UpdateDeviceAddr(ctx context.Context, arg UpdateDeviceAddrParams) error {
	_, err := q.exec(ctx, q.updateDeviceAddrStmt, updateDeviceAddr,
		arg.DeviceID,
		arg.IpAddr,
		arg.MacAddr,
		arg.Port,
	)
	return err
}
