// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: measurement.sql

package repo

import (
	"context"
	"time"
)

const getHighestMeasurementOfLastHour = `-- name: GetHighestMeasurementOfLastHour :one
SELECT MAX(mvalue) FROM measurements WHERE sensor_id = $1 AND device_id = $2 AND attribute_id = $3 AND mtime >= NOW() - INTERVAL '1 hour'
`

type GetHighestMeasurementOfLastHourParams struct {
	SensorID    int32 `json:"sensor_id"`
	DeviceID    int32 `json:"device_id"`
	AttributeID int32 `json:"attribute_id"`
}

func (q *Queries) GetHighestMeasurementOfLastHour(ctx context.Context, arg GetHighestMeasurementOfLastHourParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getHighestMeasurementOfLastHourStmt, getHighestMeasurementOfLastHour, arg.SensorID, arg.DeviceID, arg.AttributeID)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getLatestMeasurement = `-- name: GetLatestMeasurement :one
SELECT mtime, sensor_id, device_id, attribute_id, mvalue FROM measurements WHERE sensor_id = $1 AND device_id = $2 AND attribute_id = $3 ORDER BY mtime DESC LIMIT 1
`

type GetLatestMeasurementParams struct {
	SensorID    int32 `json:"sensor_id"`
	DeviceID    int32 `json:"device_id"`
	AttributeID int32 `json:"attribute_id"`
}

func (q *Queries) GetLatestMeasurement(ctx context.Context, arg GetLatestMeasurementParams) (Measurement, error) {
	row := q.queryRow(ctx, q.getLatestMeasurementStmt, getLatestMeasurement, arg.SensorID, arg.DeviceID, arg.AttributeID)
	var i Measurement
	err := row.Scan(
		&i.Mtime,
		&i.SensorID,
		&i.DeviceID,
		&i.AttributeID,
		&i.Mvalue,
	)
	return i, err
}

const insertMeasurement = `-- name: InsertMeasurement :exec
INSERT INTO measurements (mtime, sensor_id, device_id, attribute_id, mvalue) VALUES ($1, $2, $3, $4, $5)
`

type InsertMeasurementParams struct {
	Mtime       time.Time `json:"mtime"`
	SensorID    int32     `json:"sensor_id"`
	DeviceID    int32     `json:"device_id"`
	AttributeID int32     `json:"attribute_id"`
	Mvalue      float64   `json:"mvalue"`
}

func (q *Queries) InsertMeasurement(ctx context.Context, arg InsertMeasurementParams) error {
	_, err := q.exec(ctx, q.insertMeasurementStmt, insertMeasurement,
		arg.Mtime,
		arg.SensorID,
		arg.DeviceID,
		arg.AttributeID,
		arg.Mvalue,
	)
	return err
}
