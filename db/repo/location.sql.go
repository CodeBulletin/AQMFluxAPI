// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: location.sql

package repo

import (
	"context"
)

const createLocation = `-- name: CreateLocation :exec
INSERT INTO DeviceLocation (location_id, location_name, location_desc) VALUES ($1, $2, $3)
`

type CreateLocationParams struct {
	LocationID   int32  `json:"location_id"`
	LocationName string `json:"location_name"`
	LocationDesc string `json:"location_desc"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) error {
	_, err := q.exec(ctx, q.createLocationStmt, createLocation, arg.LocationID, arg.LocationName, arg.LocationDesc)
	return err
}

const getLocations = `-- name: GetLocations :many
SELECT location_id, location_name, location_desc FROM DeviceLocation
`

func (q *Queries) GetLocations(ctx context.Context) ([]Devicelocation, error) {
	rows, err := q.query(ctx, q.getLocationsStmt, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Devicelocation{}
	for rows.Next() {
		var i Devicelocation
		if err := rows.Scan(&i.LocationID, &i.LocationName, &i.LocationDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :exec
UPDATE DeviceLocation SET location_name = $1, location_desc = $2 WHERE location_id = $3
`

type UpdateLocationParams struct {
	LocationName string `json:"location_name"`
	LocationDesc string `json:"location_desc"`
	LocationID   int32  `json:"location_id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.exec(ctx, q.updateLocationStmt, updateLocation, arg.LocationName, arg.LocationDesc, arg.LocationID)
	return err
}
